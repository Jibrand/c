Name Muhammad Jibran
ID: FA22-BESE-0009

Q1) 
 
Code:
interface Vehicle 
{
   make:string
   model:string
year:string
   start():string
}

class Car implements   Vehicle
 {
   make:string
   model:string
   year:string

   constructor(make:string, model:string, year:string) 
   {
       this.make =make
       this.model =model
       this.year =year
}

   start():string 
   {
       return `${this.make} ${this.model} is starting..`
}

   drive():string 
   {
       return `${this.make} ${this.model} is driving`
}
}

const myCar = new Car("Toyota", "Corolla", "2022")
console.log(myCar.start())
console.log(myCar.drive())


	


Q2)
 
Code:
interface Shape 
{
   name:string
   area():number
}

class Rectangle implements Shape {
   name
   width
   height
 constructor(width: number, height: number) 
   {
       this.name ="Rectangle"
       this.width =width
       this.height =height

}

   area()
   {
    return this.width*this.height
}
}

class Circle implements Shape 
{
   name
     radius

   constructor(radius: number) 
   {
       this.name ="Circle"
       this.radius =radius
}

   area() {
       return 3.14 *this.radius * this.radius
 }
}

let myRectangle = new Rectangle(5,10)
console.log(myRectangle.name + " Area:", myRectangle.area())

let myCircle = new Circle(7)
console.log(myCircle.name + " Area:", myCircle.area())

Q3)
 
Code:
function mergeObjects<T,U>(obj1:   T, obj2:   U): T  &   U
 {
    return {...obj1,...obj2}
}
let person = { name: "Jibran",   age:25}
let job = { role: "Developer",  company: "MAJU"}
let merged = mergeObjects(person, job)


console.log(merged)  



Q4)
 
Code:
function isnumber(value:any): value is number {
    return typeof value==="number"
}
function checkType(value: string  |   number   | boolean) {
    if (isnumber(value)) {
        console.log("It's a number:", value)
    } else if (typeof value === "string") 
    {
        console.log("It's a string:", value)
} else {
        console.log("It's a boolean:", value)
 }
}

checkType(42)  
checkType("Hello") 
checkType(true) 



Q5)
 
Code:
let students=[
    { name: "Jibran", score: 85 },
    { name: "Tameem", score: 92 },
    { name: "Adnan", score: 78 },
    { name: "Saad", score: 95 }
]
function getTopStudent(students:{name:string, score:   number }[]) {
    return students.reduce((top, student) => student.score   > top.score ?    student : top)
}
let topStudent = getTopStudent(students)

console.log("Top Studet:", topStudent)

let studentResult: [string, number, boolean] = [topStudent.name, topStudent.score, topStudent.score > 50]

console.log("Studnt Tuple:", studentResult)



Q6)
 
Code:
enum Days {
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday,
    Saturday,
    Sunday
}

function daysUntilWeekend(day: Days): number {
    if (day >= Days.Saturday) return 0
    return Days.Saturday - day
}

console.log("Days until weekend from Monday:", daysUntilWeekend(Days.Monday)) // 5
console.log("Days until weekend from Friday:", daysUntilWeekend(Days.Friday)) // 1
console.log("Days until weekend from Sunday:", daysUntilWeekend(Days.Sunday)) // 0












Q7)
 


Code:
interface Book {
title:string
author: string
year: number
}

    let upcomingBook: Partial   <Book> = {
    title: "The Future of AI",
    author: "Jibran dude"
}

    let completeBook: Book = { ...upcomingBook, year: 2025 } as Book



console.log("Upcoming Book:", upcomingBook)
console.log("Complete Book:", completeBook)

q8)
 
Code:
function Timestamp(target: any, methodName: string, descriptor: PropertyDescriptor) {
    if (!descriptor || typeof descriptor.value !== "function") 
        {
        throw new Error("Timestamp decorator can only be applied to methods.");
}

    const originalMethod = descriptor.value;
    
    descriptor.value = function (...args: any[]) {
          console.log(`Time: ${new Date().toLocaleTimeString()}`);
        return originalMethod.apply(this, args);
};

    return descriptor;  
}

class Logger {
    @Timestamp

    log() 
    {
          console.log("Logging something...");
}
}


const logger = new Logger();
logger.log();











---factory---------

public class Main {
    public static void main(String[] args) {
        VehicleFactory vehicleFactory = new VehicleFactory();

        Vehicle vehicle = vehicleFactory.getVehicle("Bike");
        if (vehicle != null) {
            vehicle.start();
            vehicle.stop();
        }

        vehicle = vehicleFactory.getVehicle("Car");
        if (vehicle != null) {
            vehicle.start();
            vehicle.stop();
        }

        vehicle = vehicleFactory.getVehicle("Truck");
        if (vehicle != null) {
            vehicle.start();
            vehicle.stop();
        }
    }
}

interface Vehicle {
    void start();
    void stop();
}

class Bike implements Vehicle {
    @Override
    public void start() {
        System.out.println("Bike started");
    }

    @Override
    public void stop() {
        System.out.println("Bike stopped");
    }
}

class Car implements Vehicle {
    @Override
    public void start() {
        System.out.println("Car started");
    }

    @Override
    public void stop() {
        System.out.println("Car stopped");
    }
}

class Truck implements Vehicle {
    @Override
    public void start() {
        System.out.println("Truck started");
    }

    @Override
    public void stop() {
        System.out.println("Truck stopped");
    }
}

class VehicleFactory {
    public Vehicle getVehicle(String name) {
        if (name.equalsIgnoreCase("Bike")) {
            return new Bike();
        } else if (name.equalsIgnoreCase("Car")) {
            return new Car();
        } else if (name.equalsIgnoreCase("Truck")) {
            return new Truck();
        }
        System.out.println("Invalid vehicle type!");
        return null;
    }
}


---facade---------
public class Main {
    public static void main(String[] args) {
        // Initialize components
        Light light = new Light();
        Speaker speaker = new Speaker();

        // Pass components to the Facade
        Facade f = new Facade(light, speaker);

        // Use the Facade to control components
        f.start();
        f.stop();
    }
}

class Speaker {
    public void openSpeaker() {
        System.out.println("Speaker opened");
    }

    public void closeSpeaker() {
        System.out.println("Speaker closed");
    }
}

class Light {
    public void openLight() {
        System.out.println("Light opened");
    }

    public void closeLight() {
        System.out.println("Light closed");
    }
}

class Facade {
    private Light light;
    private Speaker speaker;

    // Constructor to initialize components
    public Facade(Light light, Speaker speaker) {
        this.light = light;
        this.speaker = speaker;
    }

    public void start() {
        light.openLight();
        speaker.openSpeaker();
    }

    public void stop() {
        light.closeLight();
        speaker.closeSpeaker();
    }
}

---template---------
abstract class Meal {
    // Abstract methods to be implemented by subclasses
    public abstract void addIngredients();
    public abstract void cook();

    // Concrete method for serving
    public void serve() {
        System.out.println("Serving the meal");
    }

    // Template method (final to prevent overriding)
    public final void makeFood() {
        addIngredients();
        cook();
        serve();
    }
}

class Burger extends Meal {
    @Override
    public void addIngredients() {
        System.out.println("Adding ingredients for the Burger");
    }

    @Override
    public void cook() {
        System.out.println("Cooking the Burger");
    }
}

class Pizza extends Meal {
    @Override
    public void addIngredients() {
        System.out.println("Adding ingredients for the Pizza");
    }

    @Override
    public void cook() {
        System.out.println("Cooking the Pizza");
    }
}

public class Main {
    public static void main(String[] args) {
        // Create a Burger object and prepare food
        Meal meal = new Burger();
        meal.makeFood();

        System.out.println();

        // Create a Pizza object and prepare food
        meal = new Pizza();
        meal.makeFood();
    }
}


---Decorator---------

// Component interface
interface Coffee {
    String getDescription();
    double getCost();
}

// Concrete Component (Basic Coffee)
class BasicCoffee implements Coffee {
    @Override
    public String getDescription() {
        return "Basic Coffee";
    }

    @Override
    public double getCost() {
        return 50.0; // Base price of coffee
    }
}

// Abstract Decorator
abstract class CoffeeDecorator implements Coffee {
    protected Coffee coffee; // Composition: wraps the Coffee component

    public CoffeeDecorator(Coffee coffee) {
        this.coffee = coffee;
    }

    @Override
    public String getDescription() {
        return coffee.getDescription(); // Delegates to the wrapped component
    }

    @Override
    public double getCost() {
        return coffee.getCost(); // Delegates to the wrapped component
    }
}

// Concrete Decorators
class MilkDecorator extends CoffeeDecorator {
    public MilkDecorator(Coffee coffee) {
        super(coffee);
    }

    @Override
    public String getDescription() {
        return coffee.getDescription() + ", Milk";
    }

    @Override
    public double getCost() {
        return coffee.getCost() + 10.0; // Adds the cost of milk
    }
}

class SugarDecorator extends CoffeeDecorator {
    public SugarDecorator(Coffee coffee) {
        super(coffee);
    }

    @Override
    public String getDescription() {
        return coffee.getDescription() + ", Sugar";
    }

    @Override
    public double getCost() {
        return coffee.getCost() + 5.0; // Adds the cost of sugar
    }
}

class CaramelDecorator extends CoffeeDecorator {
    public CaramelDecorator(Coffee coffee) {
        super(coffee);
    }

    @Override
    public String getDescription() {
        return coffee.getDescription() + ", Caramel";
    }

    @Override
    public double getCost() {
        return coffee.getCost() + 15.0; // Adds the cost of caramel
    }
}

// Main Class
public class Main {
    public static void main(String[] args) {
        // Create a basic coffee
        Coffee coffee = new BasicCoffee();
        System.out.println(coffee.getDescription() + " -> Cost: " + coffee.getCost());

        // Add milk to the coffee
        coffee = new MilkDecorator(coffee);
        System.out.println(coffee.getDescription() + " -> Cost: " + coffee.getCost());

        // Add sugar to the coffee
        coffee = new SugarDecorator(coffee);
        System.out.println(coffee.getDescription() + " -> Cost: " + coffee.getCost());

        // Add caramel to the coffee
        coffee = new CaramelDecorator(coffee);
        System.out.println(coffee.getDescription() + " -> Cost: " + coffee.getCost());
    }
}
---strategy---------

// Strategy Interface
interface PaymentStrategy {
    void pay(double amount);
}

// Concrete Strategies
class CreditCardPayment implements PaymentStrategy {
    private String cardNumber;

    public CreditCardPayment(String cardNumber) {
        this.cardNumber = cardNumber;
    }

    @Override
    public void pay(double amount) {
        System.out.println("Paid " + amount + " using Credit Card. Card Number: " + cardNumber);
    }
}

class PayPalPayment implements PaymentStrategy {
    private String email;

    public PayPalPayment(String email) {
        this.email = email;
    }

    @Override
    public void pay(double amount) {
        System.out.println("Paid " + amount + " using PayPal. Email: " + email);
    }
}

class BitcoinPayment implements PaymentStrategy {
    private String walletAddress;

    public BitcoinPayment(String walletAddress) {
        this.walletAddress = walletAddress;
    }

    @Override
    public void pay(double amount) {
        System.out.println("Paid " + amount + " using Bitcoin. Wallet Address: " + walletAddress);
    }
}

// Context Class
class PaymentContext {
    private PaymentStrategy paymentStrategy;

    // Set strategy at runtime
    public void setPaymentStrategy(PaymentStrategy paymentStrategy) {
        this.paymentStrategy = paymentStrategy;
    }

    public void payAmount(double amount) {
        if (paymentStrategy == null) {
            System.out.println("No payment method selected.");
        } else {
            paymentStrategy.pay(amount);
        }
    }
}

// Main Class
public class Main {
    public static void main(String[] args) {
        PaymentContext paymentContext = new PaymentContext();

        // Use Credit Card Payment
        paymentContext.setPaymentStrategy(new CreditCardPayment("1234-5678-9876-5432"));
        paymentContext.payAmount(250.75);

        // Use PayPal Payment
        paymentContext.setPaymentStrategy(new PayPalPayment("user@example.com"));
        paymentContext.payAmount(100.50);

        // Use Bitcoin Payment
        paymentContext.setPaymentStrategy(new BitcoinPayment("1BitcoinWalletAddress"));
        paymentContext.payAmount(500.00);
    }
}
